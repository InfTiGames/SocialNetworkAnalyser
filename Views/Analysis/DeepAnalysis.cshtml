@model SocialNetworkAnalyser.Models.AnalysisViewModel
@{
    ViewData["Title"] = "Deep Analysis";
}

<div class="container mt-5 text-center">
    <h2 class="mb-3">Deep Analysis for Dataset: @Model.Dataset.Name</h2>
    <p class="text-muted">Import Date: @Model.Dataset.ImportDate.ToString("g")</p>

    <div class="card mx-auto shadow-sm card--small">
        <div class="card-header bg-primary text-white">
            Basic Statistics
        </div>
        <div class="card-body">
            <p class="fw-bold">Total Users: <span class="text-success">@Model.AnalysisData.TotalUsers</span></p>
            <p class="fw-bold">Average Friends per User: <span class="text-success">@Model.AnalysisData.AverageFriendsPerUser.ToString("F2")</span></p>
        </div>
    </div>

    <hr class="my-4" />

    <h3 class="mb-3">Additional Statistics</h3>

    <div class="card mx-auto shadow-sm card--wide">
        <div class="card-header bg-secondary text-white">
            Average Reachable Users by Distance
        </div>
        <div class="card-body">
            @if (Model.AnalysisData.AverageCountsPerDistance.Any())
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Distance</th>
                            <th>Average Count</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var kv in Model.AnalysisData.AverageCountsPerDistance)
                        {
                            <tr>
                                <td>@kv.Key</td>
                                <td>@kv.Value.ToString("F2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            }
            else
            {
                <p class="text-muted">No data available.</p>
            }
        </div>
    </div>

    <div class="mt-4">
        <h4>Average Maximal Clique Size</h4>
        <p class="fw-bold text-success">@Model.AnalysisData.AverageMaximalCliqueSize.ToString("F2")</p>
    </div>

    <hr class="my-4" />

    <h3 class="mb-3">Graph Visualization</h3>
    <button id="showGraphButton" class="btn btn-lg btn-primary shadow-sm" onclick="initGraph()">Show Graph</button>
    <div id="cy" class="mx-auto"></div>

    <script src="https://unpkg.com/cytoscape@3.20.0/dist/cytoscape.min.js"></script>
    <script>
        function initGraph() {        
          const graphData = JSON.parse('@Html.Raw(ViewBag.GraphData)');
          const elements = graphData.nodes && graphData.edges
            ? graphData.nodes.concat(graphData.edges)
            : graphData;

          let nodeCount = 0;
          if (graphData.nodes && Array.isArray(graphData.nodes)) {
            nodeCount = graphData.nodes.length;
          } else {
            nodeCount = elements.filter(el => el.group === 'nodes').length;
          }

          let sideDimension = Math.ceil(Math.sqrt(nodeCount)) * 100 + 100;

          const cy = cytoscape({
            container: document.getElementById('cy'),
            elements: elements,
            layout: {
              name: 'random',
              animate: false,
              padding: 30,            
              boundingBox: { x1: 0, y1: 0, w: sideDimension, h: sideDimension }
            },
            style: [
              {
                selector: 'node',
                style: {                
                  'background-color': 'mapData(degree, 0, 10, #AEDFF7, #837DFF)',
                  'label': 'data(label)',
                  'width': 'mapData(degree, 0, 10, 10, 30)',
                  'height': 'mapData(degree, 0, 10, 10, 30)',
                  'text-valign': 'center',
                  'text-halign': 'center',
                  'color': '#333',
                  'font-size': '10px'
                }
              },
              {
                selector: 'node[degree >= 10]',
                style: {
                  'width': 30,
                  'height': 30,
                  'background-color': '#837DFF'
                }
              },              
              {
                selector: 'edge',
                style: {
                  'width': 1,              
                  'line-color': 'rgba(170, 170, 170, 0.5)',
                  'target-arrow-shape': 'none'
                }
              },
              {
                selector: 'edge[overloaded = "true"]',
                style: {               
                  'line-color': 'rgba(70,70,70,0.7)',
                  'target-arrow-shape': 'none'
                }
              },
              {
                selector: 'edge[overloaded = "false"]',
                style: {              
                  'line-color': 'rgba(170, 170, 170, 0.5)',
                  'target-arrow-shape': 'none'
                }
              }
            ],
            userPanningEnabled: true,
            zoomingEnabled: true
          });

          setTimeout(() => {
            cy.nodes().forEach(node => {
              node.data('degree', node.degree());
            });
            cy.edges().forEach(edge => {
              const srcDegree = edge.source().data('degree');
              edge.data('overloaded', srcDegree >= 10 ? "true" : "false");
            });

            let center = { x: sideDimension / 2, y: sideDimension / 2 };
            cy.nodes().forEach(node => {
              let pos = node.position();
              let dx = pos.x - center.x, dy = pos.y - center.y;
              let r = Math.sqrt(dx * dx + dy * dy);
              let offset = node.data('degree') * 5;
              if (r === 0) {
                dx = 1; dy = 1;
                r = Math.sqrt(2);
              }
              let newR = r + offset;
              let newX = center.x + (dx / r) * newR;
              let newY = center.y + (dy / r) * newR;
              node.position({ x: newX, y: newY });
            });
            document.getElementById("showGraphButton").style.display = "none";
          }, 500);
        }
    </script>

    <div class="mt-4">
        <a asp-action="BasicAnalysis" asp-route-id="@Model.Dataset.Id" class="btn btn-lg btn-secondary shadow-sm">
            Back to Basic Analysis
        </a>
    </div>
</div>